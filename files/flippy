#!/bin/bash
# flippy's openwrt tools

SNAPSHOT_PRESTR=".snapshots/"
BACKUP_DIR="/.reserved"
BACKUP_FILE="${BACKUP_DIR}/openwrt_config.tar.gz"
BACKUP_LIST='./etc/AdGuardHome.yaml \
./etc/adblocklist/ \
./etc/amule/ \
./etc/china_ssr.txt \
./etc/cifs/cifsdpwd.db \
./etc/smbd/smbdpwd.db \
./etc/ksmbd/ksmbdpwd.db \
./etc/config/ \
./etc/openclash/backup/ \
./etc/openclash/core/ \
./etc/openclash/config/ \
./etc/openclash/custom/ \
./etc/openclash/game_rules/ \
./etc/openclash/rule_provider/ \
./etc/openclash/proxy_provider/ \
./etc/dnsforwarder/ \
./etc/dnsmasq.conf \
./etc/dnsmasq.d/ \
./etc/dnsmasq.oversea/ \
./etc/dnsmasq.ssr/ \
./etc/docker/key.json \
./etc/dropbear/ \
./etc/easy-rsa/ \
./etc/environment \
./etc/exports \
./etc/firewall.user \
./etc/gfwlist/ \
./etc/haproxy.cfg \
./etc/hosts \
./etc/ipsec.conf \
./etc/ipsec.d/ \
./etc/ipsec.secrets \
./etc/ipsec.user \
./etc/ipset/ \
./etc/mwan3.user \
./etc/nginx/nginx.conf \
./etc/ocserv/ \
./etc/openvpn/ \
./etc/pptpd.conf \
./etc/qBittorrent/ \
./etc/rc.local \
./etc/samba/smbpasswd \
./etc/shadow \
./etc/smartdns/ \
./etc/sqm/ \
./etc/ssh/*key*  \
./etc/ssl/private/  \
./etc/ssrplus/ \
./etc/transmission/ \
./etc/uhttpd.crt \
./etc/uhttpd.key \
./etc/urandom.seed \
./root/.ssh/'

if dmesg | grep 'meson' >/dev/null 2>&1; then
    PLATFORM="amlogic"
elif dmesg | grep 'rockchip' >/dev/null 2>&1; then
    PLATFORM="rockchip"
elif dmesg | grep 'sun50i-h6' >/dev/null 2>&1; then
    PLATFORM="allwinner"
else
   echo "发现未知的平台，当前仅支持 amlogic, rockchip, allwinner H6 等 3 种平台!"
   exit 1
fi

backup() {
    cd /
    echo -n "备份配置文件 ... "
    [ -d "${BACKUP_DIR}" ] || mkdir -p "${BACKUP_DIR}"
    eval tar czf "${BACKUP_FILE}" "${BACKUP_LIST}" 2>/dev/null
    if [ -f "${BACKUP_FILE}" ];then
        echo "成功"
        exit 0
    else
        echo "失败!"
        exit 1
    fi
}

restore() {
    if [ -f "${BACKUP_FILE}" ];then
	echo -n "恢复配置文件 ... "
        cd /
        tar xzf "${BACKUP_FILE}"
	echo "成功"
    else
        echo "没找到备份文件: ${BACKUP_FILE}!"
        exit 1
    fi
}

create_snapshot() {
    snap_name=$(date +"%Y%m%d%H%M%S") 
    (  cd /
       chattr -ia etc/config/fstab
       btrfs subvolume snapshot -r /etc "${SNAPSHOT_PRESTR}etc-${snap_name}"
       if [ $? -eq 0 ];then
  	   echo "快照创建成功: etc-${snap_name}"
       else
	   echo "快照创建失败！"
       fi
    )
    read -p "按回车键退出" q
    exit 0 
}

list_snapshot() {
    echo "-----------------------------------------------------------------------------------"
    btrfs subvolume list -srt /
    echo "-----------------------------------------------------------------------------------"
    read -p "按回车键返回" q
}

delete_snapshot() {
    echo "下面是已存在的 etc 快照，请输入其中一个的名字"
    echo "提示： etc-000 这是出厂初始配置 (不可删除)"
    echo "       etc-001 如果存在，则是从上个版本升级后的初始配置 (不可删除)"
    echo "-----------------------------------------------------------------------------------"
    btrfs subvolume list -sr -t /
    echo "-----------------------------------------------------------------------------------"
    read -p "请输入要删除的快照名字(只需要输入 ${SNAPSHOT_PRESTR} 之后的部分): " snap_name
    if [ "$snap_name" == "etc-000" ] || [ "$snap_name" == "etc-001" ];then
	 read -p "关键快照不可删除! 按回车键返回" q
    else
         if btrfs subvolume list -srt / | grep "${SNAPSHOT_PRESTR}${snap_name}" > /dev/null;then
	     read -p "确定要删除 $snap_name 吗? y/n [n]" yn
	     case $yn in 
	         y|Y)
		       (
		          cd /
		          btrfs subvolume delete -c ${SNAPSHOT_PRESTR}${snap_name} 
		          if [ $? -eq 0 ];then
		              echo "快照 ${snap_name} 已删除"
			  else
			      echo "快照 ${snap_name} 删除失败!"
			  fi
		        )
	   	        read -p "按回车建返回." q
			;;
	           *)   break
		        ;;
	     esac
         else
	     read -p "快照名字不正确，按回车键返回." q
	 fi
    fi
}

restore_snapshot() {
    echo "下面是已存在的 etc 快照，请输入其中一个的名字"
    echo "提示： etc-000 这是出厂初始配置"
    echo "       etc-001 如果存在，则是从上个版本升级后的初始配置"
    echo "-----------------------------------------------------------------------------------"
    btrfs subvolume list -srt /
    echo "-----------------------------------------------------------------------------------"
    read -p "请输入要恢复的快照名字(只需要输入 ${SNAPSHOT_PRESTR} 之后的部分): " snap_name
    if btrfs subvolume list -srt / | grep "${SNAPSHOT_PRESTR}${snap_name}" > /dev/null;then
	while :;do
	    echo "一旦恢复快照，当前的 /etc 将全部被覆盖！"
	    read -p "确定要恢复快照: $snap_name 吗? y/n [n] " yn
	    case $yn in 
		    y|Y)
			    (
			      cd /
                              chattr -ia etc/config/fstab
			      mv etc etc.backup
                              btrfs subvolume snapshot ${SNAPSHOT_PRESTR}${snap_name} etc
			      if [ $? -eq 0 ];then
				 btrfs subvolume delete -c etc.backup
				 echo "恢复成功，请输入 reboot 重启系统！"
			      else
				 rm -rf etc 
				 mv etc.backup etc
				 echo "恢复失败, etc 未发生任何变化!"
			      fi
		            )
	   		    read -p "按回车建返回" q
			    break
			    ;;
	              *)    break
			    ;;
	    esac
        done
    else
	read -p "快照名字不正确，请重新运行程序！按回车键返回." q
    fi
}

gen_fstab() {
    ROOT_MSG=$(lsblk -l -o NAME,PATH,MOUNTPOINT,UUID,FSTYPE,LABEL | awk '$3 ~ /^\/$/ {print $0}')
    if [ "$ROOT_MSG" == "" ];then
	echo "获得 rootfs 信息失败!"
	exit 1
    fi

    ROOT_NAME=$(echo $ROOT_MSG | awk '{print $1}')
    ROOT_DEV=$(echo $ROOT_MSG | awk '{print $2}')
    ROOT_UUID=$(echo $ROOT_MSG | awk '{print $4}')
    ROOT_FSTYPE=$(echo $ROOT_MSG | awk '{print $5}')
    ROOT_LABEL=$(echo $ROOT_MSG | awk '{print $6}')

    EMMC_NAME=$(echo $ROOT_NAME | cut -c 1-7)

    BOOT_NAME="${EMMC_NAME}p1"
    BOOT_MSG=$(lsblk -l -o NAME,UUID,FSTYPE,LABEL | grep "${BOOT_NAME}")
    BOOT_DEV="/dev/${BOOT_NAME}"
    BOOT_UUID=$(echo $BOOT_MSG | awk '{print $2}')
    BOOT_FSTYPE=$(echo $BOOT_MSG | awk '{print $3}')
    BOOT_LABEL=$(echo $BOOT_MSG | awk '{print $4}')

    cat > /etc/config/fstab <<EOF
config global
	option anon_swap '0'
	option anon_mount '1'
	option auto_swap '0'
	option auto_mount '1'
	option delay_root '5'
	option check_fs '0'

config mount
	option target '/overlay'
	option uuid '${ROOT_UUID}'
	option enabled '1'
	option enabled_fsck '1'
	option fstype '${ROOT_FSTYPE}'
EOF

    if [ "${ROOT_FSTYPE}" == "btrfs" ];then
        echo "	option options 'compress=zstd'" >> /etc/config/fstab
    fi

    cat >> /etc/config/fstab <<EOF

config mount
	option target '/boot'
EOF
    
    if [ "${BOOT_FSTYPE}" == "vfat" ];then
        echo "	option label '${BOOT_LABEL}'" >> /etc/config/fstab
    else
        echo "	option uuid '${BOOT_UUID}'" >> /etc/config/fstab
    fi

    cat >> /etc/config/fstab <<EOF
	option enabled '1'
	option enabled_fsck '0'
	option fstype '${BOOT_FSTYPE}'
           
EOF
    echo "/etc/config/fstab 已生成完毕."
    echo "请输入 reboot 命令重启系统"
    exit 0
}

print_list() {
    echo "${BACKUP_LIST}"
    exit 0
}

print_help() {
    echo "用法:  $0  -b    (备份)"
    echo "       $0  -r    (恢复)"
    echo "       $0  -p    (打印备份文件清单)"
    echo "       $0  -g    (生成 fstab)"
    echo "       $0  -B    (创建 etc 快照)"
    echo "       $0  -L    (列出已有的 etc 快照)"
    echo "       $0  -R    (还原 etc 快照)"
    echo "       $0  -D    (删除某个 etc 快照)"
    echo "       $0  -h    (帮助)"
    exit 0
}

menu() {
    while :;do
        clear
        cat <<EOF
          Flippy 的工具包
┌─────────────────────────────────┐ 
│         b. 备份                 │
│         r. 恢复                 │
│         p. 打印备份清单         │
│         g. 生成 fstab           │
│         B. 创建 etc 快照        │
│         L. 列出当前的 etc 快照  │
│         R. 还原 etc 快照        │
│         D. 删除某个 etc 快照    │
│         h. 帮助                 │
╞═════════════════════════════════╡
│         q. 退出                 │
└─────────────────────────────────┘
EOF
echo -ne " 请选择: [ ]\b\b"
        read select
	case $select in 
	    b)  backup;;
	    r)  restore
		gen_fstab;;
	    p)  print_list;;
            g)  gen_fstab;;
	    B)  create_snapshot;;
	    L)  list_snapshot;;
	    R)  restore_snapshot;;
	    D)  delete_snapshot;;
	    h)  print_help;;
	    q)  exit 0;;
	esac
    done
}

getopts 'brpgBLRDh' opts
case $opts in 
    b) backup;;
    r) restore
       gen_fstab;;
    p) print_list;;
    g) gen_fstab;;
    B) create_snapshot;;
    L) list_snapshot;;
    R) restore_snapshot;;
    D) delete_snapshot;;
    h) print_help;;
    *) menu;;
esac
